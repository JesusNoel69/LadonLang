
using System;
using System.Collections.Generic;

namespace BasicLanguageScanner
{
    public class Scanner
    {
        private static char[] _delimiters = {'=', '<', ';', ',', '.', '>', '&', '|', ' ', '*', '%', '!'};
        
        private static int[,] TransitionMatrix = {
            // Estado 0: Inicial
            {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, // transiciones para letras y delimitadores
            // Estado 1: Palabra
            {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // transiciones para letras y delimitadores
            // Estado 2: Entero
            {2, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, // transiciones para dígitos
            // Estado 3: Final de Entero
            {99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99} // estado final para enteros
        };

        public static List<string> tokenVector = new List<string>();

        public static void Scan(string input)
        {
            int currentState = 0;
            string token = "";

            foreach (char c in input)
            {
                int column = GetColumn(c);
                currentState = TransitionMatrix[currentState, column];

                if (currentState == 99) // Estado de error
                {
                    Console.WriteLine("Error: Caracter no válido encontrado.");
                    return;
                }

                if (!IsDelimiter(c))
                {
                    token += c;
                }
                else
                {
                    if (!string.IsNullOrEmpty(token))
                    {
                        tokenVector.Add(token);
                        token = "";
                    }

                    tokenVector.Add(c.ToString());
                }

                if (currentState >= 100) // Estado final
                {
                    tokenVector.Add(token);
                    token = "";
                    currentState = 0; // Reiniciar al estado inicial
                }
            }

            if (!string.IsNullOrEmpty(token))
            {
                tokenVector.Add(token);
            }
        }

        private static int GetColumn(char c)
        {
            if (char.IsLetter(c))
            {
                return 0;
            }
            else if (char.IsDigit(c))
            {
                return 1;
            }
            else
            {
                switch (c)
                {
                    case '=':
                        return 2;
                    case '<':
                        return 3;
                    case ';':
                        return 4;
                    case ',':
                        return 5;
                    case '.':
                        return 6;
                    case '>':
                        return 7;
                    case '&':
                        return 8;
                    case '|':
                        return 9;
                    case ' ':
                        return 10;
                    case '*':
                        return 11;
                    case '%':
                        return 12;
                    case '!':
                        return 13;
                    default:
                        return 14; // Otros caracteres
                }
            }
        }

        private static bool IsDelimiter(char c)
        {
            return Array.IndexOf(_delimiters, c) != -1;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Scanner.Scan("int x=103;");
            foreach (string token in Scanner.tokenVector)
            {
                Console.WriteLine(token);
            }
        }
    }
}